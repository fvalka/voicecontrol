package com.vektorraum.voicecontrol.phoneprovider;

import com.twilio.http.HttpMethod;
import com.twilio.twiml.VoiceResponse;
import com.twilio.twiml.voice.*;
import com.vektorraum.voicecontrol.event.InboundCallEvent;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

/**
 * Twilio based PhoneManagementService which reacts to twilio webhooks and produces TwiML XML instructions.
 *
 * Additionally internal events are generated by the handler methods, which can be used for further
 * processing internally.
 */
@RestController
@Slf4j
public class PhoneManagementRest {
    private ApplicationEventPublisher applicationEventPublisher;

    @Autowired
    public PhoneManagementRest(ApplicationEventPublisher applicationEventPublisher) {
        this.applicationEventPublisher = applicationEventPublisher;
    }

    /**
     * Handles an inbound call and produces a TwiML XML output
     *
     * @param body All request parameters, contains From, To, CallSid, etc.
     * @return TwiML XML instructions for how the call should proceed
     */
    @PostMapping(value = "/inbound", produces = "application/xml")
    public String inboundCall(@RequestBody MultiValueMap<String, String> body) {
        log.trace(body.toString());

        String callSid = body.getFirst("CallSid");
        String from = body.getFirst("From");
        String to = body.getFirst("To");

        log.info("Received inbound call from={} to={} callSid={}", from, to, callSid);

        InboundCallEvent inboundCallEvent = InboundCallEvent.builder()
                .callId(callSid)
                .from(from)
                .to(to)
                .source(this)
                .build();

        applicationEventPublisher.publishEvent(inboundCallEvent);

        VoiceResponse.Builder voiceBuilder = new VoiceResponse.Builder();
        Say greeting = new Say.Builder("Forwarding your call")
                .voice(Say.Voice.POLLY_MATTHEW)
                .build();
        Dial callForward = new Dial.Builder().number("+4369912916769")
                .timeout(20)
                .action("/voicemail")
                .build();

        Redirect redirectToVoiceMail = new Redirect.Builder("/voicemail").build();

        return voiceBuilder.say(greeting)
                //.dial(callForward)
                .redirect(redirectToVoiceMail)
                //.hangup(new Hangup.Builder().build())
                .build()
                .toXml();
    }

    @PostMapping(value = "/voicemail", produces = "application/xml")
    public String voicemail(@RequestBody MultiValueMap<String, String> body) {
        Say voiceMailGreeting = new Say.Builder("Hi! You have reached the voice mail of Fabian Valka. Please leave a message after the beep")
                .voice(Say.Voice.POLLY_MATTHEW)
                .build();

        Record voiceMailRecord = new Record.Builder()
                .action("/thankyoubye")
                .timeout(5)
                .playBeep(true)
                .finishOnKey("*")
                .recordingStatusCallback("/recordingstatus")
                .recordingStatusCallbackMethod(HttpMethod.POST)
                .build();

        Say noMessageReceived = new Say.Builder("No message recorded. Thank you! Bye!")
                .voice(Say.Voice.POLLY_MATTHEW)
                .build();

        return new VoiceResponse.Builder()
                .say(voiceMailGreeting)
                .record(voiceMailRecord)
                .say(noMessageReceived)
                .hangup(new Hangup.Builder().build())
                .build()
                .toXml();
    }

    @PostMapping(value = "/thankyoubye", produces = "application/xml")
    public String thankYouBye(@RequestBody MultiValueMap<String, String> body) {
        Say thankYou = new Say.Builder("Thank you for leaving a message! I will get back to you as soon as possible!")
                .voice(Say.Voice.POLLY_MATTHEW)
                .build();

        return new VoiceResponse.Builder()
                .say(thankYou)
                .hangup(new Hangup.Builder().build())
                .build()
                .toXml();
    }

    @PostMapping("/status")
    public void status(@RequestBody MultiValueMap<String, String> body) {

    }

    @PostMapping("/recordingstatus")
    public void recordingStatus(@RequestBody MultiValueMap<String, String> body) {

    }
}
